/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package pt.ipp.isep.dei;

import pt.ipp.isep.dei.model.*;
import pt.ipp.isep.dei.model.helpers.*;
import pt.ipp.isep.dei.math.*;

global pt.ipp.isep.dei.repository.iRepository repository;

query "Conclusions"
	$conclusion : Conclusion()
end

rule "Stop the rule engine after 120s"
timer ( int: 120s )
salience 0
    when
    then
        System.err.println("*** Stop the rule engine after 5s ***");
        drools.halt();
    end

rule "R1: Enable Cut Over Zone Hypothesis"
lock-on-active
	when
		Preference( preference == Preference.ENABLE_GUIDED_MODE, value == "YES")
		$hypothesis : Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, status == Status.Proposed)
	then
		$hypothesis.setStatus(Status.In_Test);
		update($hypothesis);
end

rule "R2: Enable Active Zone Hypothesis"
lock-on-active
	when
		Preference( preference == Preference.ENABLE_GUIDED_MODE, value == "YES")
		Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, status == Status.Rejected)
		$hypothesis : Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_ACTIVE, status == Status.Proposed)
	then
		$hypothesis.setStatus(Status.In_Test);
		update($hypothesis);
end

rule "R3: Conclud Hypothesis Zone Hypothesis"
lock-on-active
	when
		Preference( preference == Preference.ENABLE_GUIDED_MODE, value == "YES")
		Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, status == Status.Rejected)
		$hypothesis : Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_ACTIVE, status == Status.Rejected)
	then
		Conclusion c = new Conclusion(Conclusion.ZONE_SATURATION);
        insert(c);
end

rule "R4: Evaluate Cut over Zone Hypothesis"
	when
		$hypothesis : Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, status == Status.In_Test)
        $vbe_on : Evidence( evidence == Evidence.VBE_ON)
        $vbb : Evidence( evidence == Evidence.VBB )
	then
	    modify($hypothesis){
	        setStatus((ValidateBTJStatus.testCutOverZone($vbb.getNumericValue(), $vbe_on.getNumericValue()) ? Status.Accepted : Status.Rejected))
	    }
end

rule "R5: Conclud Cut over Zone Hypothesis"
	when
		$hypothesis : Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, status == Status.Accepted)
	then
	    Conclusion c = new Conclusion(Conclusion.ZONE_CUTOVER);
        insert(c);
end

query "evidence"(String ev, String v)
	e : Evidence( evidence == ev, value == v )
end

