/*
 * Copyright 2015 Red Hat, Inc. and/or its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
*/

package pt.ipp.isep.dei;

import pt.ipp.isep.dei.model.*;
import pt.ipp.isep.dei.model.helpers.*;
import pt.ipp.isep.dei.kbs.bjt.*
import pt.ipp.isep.dei.model.helpers.HypothesisPhase;

global pt.ipp.isep.dei.kbs.bjt.BTJStatus btjStatus;

query "Conclusions"
	$conclusion : Conclusion()
end

query "numericEvidence"(String ev, String v)
	e : NumericEvidence( numericValue == ev, value == v )
end

query "evidence"(String ev, String v)
	e : Evidence( evidence == ev, value == v )
end

/**
 * Test hypothesis "in in cutover"
 */
rule "R1: Test hypothesis 'in in cutover'"
	when
		$h : Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, hypothesisPhase == HypothesisPhase.In_Test, status == Status.Active)
		eval(btjStatus.testCutOverZone($h))
	then
        Hypothesis h = new Hypothesis(Hypothesis.ZONE, Hypothesis.ZONE_CUT_OVER, HypothesisPhase.Accepted);
        insert(h);
end

/**
 * Hypothesis "in in cutover" accepted
 */
rule "R2: Hypothesis 'in cutover' accepted"
	when
		Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, hypothesisPhase == HypothesisPhase.Accepted)
	then
		Conclusion c = new Conclusion(Conclusion.ZONE_CUT_OVER);
        insert(c);
end

/**
 * Test hypothesis "in in active"
 */
rule "R3: Test hypothesis 'in in active'"
	when
		$h : Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_ACTIVE, hypothesisPhase == HypothesisPhase.In_Test, status == Status.Active)
		eval(btjStatus.testActiveZone($h))
	then
		Hypothesis h = new Hypothesis(Hypothesis.ZONE, Hypothesis.ZONE_ACTIVE, HypothesisPhase.Accepted);
        insert(h);
end

/**
 * Hypothesis "in in active" accepted
 */
rule "R4: Hypothesis 'in in active' accepted"
	when
		Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_ACTIVE, hypothesisPhase == HypothesisPhase.Accepted)
	then
		Conclusion c = new Conclusion(Conclusion.ZONE_ACTIVE);
        insert(c);
end

/**
 * Test hypothesis "in in saturation"
 */
rule "R5: Test hypothesis 'in in saturation'"
	when
		$h : Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_SATURATION, hypothesisPhase == HypothesisPhase.In_Test, status == Status.Active)
		eval(btjStatus.testSaturationZone($h))
	then
		Hypothesis h = new Hypothesis(Hypothesis.ZONE, Hypothesis.ZONE_SATURATION, HypothesisPhase.Accepted);
        insert(h);
end

/**
 * Hypothesis "in in saturation" accepted
 */
rule "R6: Hypothesis 'in in saturation' accepted"
	when
		Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_SATURATION, hypothesisPhase == HypothesisPhase.Accepted)
	then
		Conclusion c = new Conclusion(Conclusion.ZONE_SATURATION);
        insert(c);
end

/**
 * Guided mode and no hypothesis
 */
rule "R7: Guided mode and no hypothesis"
	when
		Preference( preference == Preference.ENABLE_GUIDED_MODE, value == "YES")
		eval(btjStatus.countNrFacts(Hypothesis.class) == 0)
	then
	    Hypothesis h = new Hypothesis(Hypothesis.ZONE, Hypothesis.ZONE_CUT_OVER);
		h.setHypothesisPhase(HypothesisPhase.In_Test);
		insert(h);
end

/**
 * Guided mode and hypothesis "in in cutover" rejected
 */
rule "R8: Guided mode and hypothesis 'in in cutover' rejected"
	when
		Preference( preference == Preference.ENABLE_GUIDED_MODE, value == "YES")
		Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, hypothesisPhase == HypothesisPhase.Rejected)
	then
	    Hypothesis h = new Hypothesis(Hypothesis.ZONE, Hypothesis.ZONE_ACTIVE);
		h.setHypothesisPhase(HypothesisPhase.In_Test);
		insert(h);
end

/**
 * Guided mode and hypothesis "in in cutover" and hypothesis "in in active" rejected
 */
rule "R9: Guided mode and hypothesis 'in in cutover' and hypothesis 'in in active' rejected"
	when
		Preference( preference == Preference.ENABLE_GUIDED_MODE, value == "YES")
		Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_CUT_OVER, hypothesisPhase == HypothesisPhase.Rejected)
		Hypothesis( description == Hypothesis.ZONE, value == Hypothesis.ZONE_ACTIVE, hypothesisPhase == HypothesisPhase.Rejected)
	then
	    Conclusion c = new Conclusion(Conclusion.ZONE_SATURATION);
        insert(c);
end

/**
 * Free mode and less than three hypothesis rejected
 */
rule "R10: Free mode and less than three hypothesis rejected"
	when
		Preference( preference == Preference.ENABLE_GUIDED_MODE, value == "NO")
		eval(btjStatus.hasMoreHypothesisToTest())
	then
	    btjStatus.chooseNewHypothesis();
end

/**
 * Free mode and three hypothesis rejected
 */
rule "R11: Free mode and three hypothesis rejected"
	when
		Preference( preference == Preference.ENABLE_GUIDED_MODE, value == "NO")
		eval(!btjStatus.hasMoreHypothesisToTest())
	then
	    Conclusion c = new Conclusion(Conclusion.ZONE_UNKNOWN);
        insert(c);
end


/**
 * Set timeout for the rules execution, to prevent infinit loop
 */
rule "Stop the rule engine after 120s"
timer ( int: 120s )
salience 0
    when
    then
        System.err.println("*** Stop the rule engine after 120s ***");
        drools.halt();
    end